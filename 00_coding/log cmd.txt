Using Python in C:\Users\Administrator\AppData\Local\Programs\Python\Python37\
Python 3.7.3
Using Git in C:\Program Files\Git\cmd
git version 2.21.0.windows.1
Setting IDF_PATH: C:\Users\Administrator\Desktop\esp-idf-install

Adding ESP-IDF tools to PATH...
    C:\Users\Administrator\.espressif\tools\xtensa-esp32-elf\esp-2019r2-8.2.0\xtensa-esp32-elf\bin
    C:\Users\Administrator\.espressif\tools\esp32ulp-elf\2.28.51.20170517\esp32ulp-elf-binutils\bin
    C:\Users\Administrator\.espressif\tools\cmake\3.13.4\bin
    C:\Users\Administrator\.espressif\tools\openocd-esp32\v0.10.0-esp32-20190313\openocd-esp32\bin
    C:\Users\Administrator\.espressif\tools\mconf\v4.6.0.0-idf-20190628\
    C:\Users\Administrator\.espressif\tools\ninja\1.9.0\
    C:\Users\Administrator\.espressif\tools\idf-exe\1.0.1\
    C:\Users\Administrator\.espressif\tools\ccache\3.7\
    C:\Users\Administrator\.espressif\python_env\idf4.0_py3.7_env\Scripts
    C:\Users\Administrator\Desktop\esp-idf-install\tools

Checking if Python packages are up to date...
Python requirements from C:\Users\Administrator\Desktop\esp-idf-install\requirements.txt are satisfied.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build


#include <stdio.h>
#include <string.h>


typedef struct
{
const char *id;
} clientstruct;

clientstruct g_client;

void initclient(clientstruct * client)
{
char arr[20];
char * temp;
snprintf(arr,sizeof(arr),"aa:bb:cc:dd:ee:ff:gg");
temp = arr;
//client->id = "test";
client->id = temp;

printf("thisis ok %s\n",client->id);
}

int main(){

    initclient(&g_client);

printf("this isnt %s",g_client.id);
printf("x");

    return 0;
}
